#include <stdio.h> 
#include <string.h>
#include <curl/curl.h>
#define RUNS = 10

struct URLFile {
  const char *filename;
  FILE *stream;
};

static size_t my_fwrite(void *buffer, size_t size, size_t nmemb, void *stream)
{
  struct URLFile *out=(struct URLFile *)stream;
  if(out && !out->stream) {
    /* open file for writing */ 
    out->stream=fopen(out->filename, "wb");
    if(!out->stream)
      return -1; /* failure, can't open file to write */ 
  }
  return fwrite(buffer, size, nmemb, out->stream);
}

int getfile(void)
{
  CURL *curl;
  CURLcode res;
  struct URLFile urlfile={
    "stockdata.txt", /* name to store the file as if succesful */ 
    NULL
  };

  curl_global_init(CURL_GLOBAL_DEFAULT);

  curl = curl_easy_init();
  if(curl) {
    /*
     * You better replace the URL with one that works!
     */ 
    curl_easy_setopt(curl, CURLOPT_URL,"http://finance.yahoo.com/webservice/v1/symbols/AAPL/quote?format=json");
    /* Define our callback to get called when there's data to be written */ 
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, my_fwrite);
    /* Set a pointer to our struct to pass to the callback */ 
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &urlfile);

    /* Switch on full protocol/debug output */ 
    //curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);

    res = curl_easy_perform(curl);

    if(CURLE_OK != res) {
      /* we failed */ 
      fprintf(stderr, "curl told us %d\n", res);
      return -1;
    }
  }
	
	//close out
  if(urlfile.stream)
    fclose(urlfile.stream);
	
	//cleanup
	curl_easy_cleanup(curl);
  curl_global_cleanup();

  return 0;
}

int main(void) {
	for(int i = 0; i < RUNS; i++) {
		//get the stock data
		
		//parse it for the price
		
		//operate logic
		
		//repeat
		}
}
