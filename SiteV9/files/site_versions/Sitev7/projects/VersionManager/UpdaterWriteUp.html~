<!DOCTYPE html>
<html>

	<head>
		<!-- Links to stylesheets -->
		<link rel="stylesheet" type="text/css" href="../../stylesheets/StandardStyling.css">
		<link rel="stylesheet" type="text/css" href="../../stylesheets/WriteUpStyling.css">
		
		<!--Page's title-->
		<title>Bronxville Programing Club</title>
	</head>

	<body>
	
		<!-- The colored header bar at the top of the page-->
		<header>
			<h1>BXV Programing Club Project Site</h1>
		</header>
		
		<!-- Narrow panel on left containing links to frequently visited pages --> 
		<nav>
			<h3 id="nav_title">Navigation</h3><hr>
			
			<a href="../../index.html">Home</a><br>
			<a href="../../Projects.html">Projects</a><br>
			<a href="../../WeeklyMinutes.html">Weekly Minutes</a><br>
			<a href="../../Bios.html">Bios</a><br>
			<a href="../../References.html">Resources</a><br>
			<a href="SiteUpdater.html">Site Updates</a>
			
		</nav>	
		
		<!-- Thick panel on right containing the page's content -->
		<div id="panel">
		
			<img src="open-source-artwork.jpg" width="80%" height="51%">
		
			<h3> Website Version Manager in HTML, CSS, and PHP </h3>
		
			<p>
			We wrote a version manager for our website. The tool allows you to visit any version of site from the past, download copies, and submit new versions. We were able to try out HTML tables 				to organize the historical versions of the site and we used an HTML form to collect information upload files. The project also gave us the opportunity to work with PHP to 				handle the submitted files and email alerts to the Webmaster.
			</p> 
		
			<p>
			Starting with a copy of the SamplePage.html file named SiteUpdater.html, we first created an html table with a couple of headings. Then we added compressed, and uncompressed historical 
			versions of the site to the 'files' folder. 
			</p>
			
			<p>			
			We created a row for each version (1 through 3) of the site and added a few notes about what changed in each. Then we added cells containing a link to 'View' and to 'Download' to each 
			row. The 'Download' option is linked the compressed version so that the browser will automatically save it. The 'View' option is linked Title.html page in the uncompressed version of 
			the site. This means the browser will try to display the page rather than download it.
			</p> 
			
			<hr>
			
			<img src="CodeSnippetOneTable.jpg" width="100%" height="37%">
			
			<hr>
			
			<p>
			Thinking ahead to how this version history might be used, we realized that future versions of the site would have their own copies of this tool. That means a user clicking 'View' could 
			navigate to the version history and click 'View' again, and again, and again. Rather than worry about having recursive copies of the site and to save memory, we decided that tool should 
			be disabled in historical versions of the site.
			</p>
			
			<p>
			Next we created a new form element for submitting new versions of the site. Knowing that the form would need to hold a file we specified it should be 'multipart/form-data' and that it 
			should <a href="http://www.w3schools.com/tags/ref_httpmethods.asp">POST</a> its contents. We decided that the form would need a file containing the new site, the names authors, a 
			comment specify the changes made, and a password to prevent malicious use. Se added a few inputs: a file upload, 2 text fields, and a text area.
			</p>
			
			<hr>
			
			<img src="CodeSnippetTwoForm.jpg" width="80%" height="22%">
			
			<hr>
			
			<p>
			Since forms are difficult to style with CSS, we wrote the name of each input in front of it and used line breaks to separate them. We also added a div around the whole form so that we 
			could position that container rather than the form.
			</p> 
			
			<p>
			So that we could send the form back to the server, we added a submit button. By specifying the 'action' attribute, we told the form to open a file called Upload.php when submitted.
			</p> 
			
			<p>
			Now that we could submit the form, we had to handle it. We created a copy of SiteUpdater.html and renamed it Upload.php. We removed the form and replaced it with the start of a PHP 	
			script. We decided the server has to do a couple of things. First, check that the password is correct and the file is okay to submit. Then, it has actually alert the Webmaster and send 
			the file to him or her. 
			</p>
			
			<p>
			We started out by saving some important information in global variables: the correct password, the name of the submitted file, its file extenstion, and the largest size file we wanted 				to accept. As you might notice, all PHP variables start with a '$' sign. The text components of the form are held in $_POST['nameOfInput'] while the file is held in $_FILES	
			['nameOfFileInput'] and has a couple of properties like 'name' or 'size'.
			</p>
			
			<hr>
			
			<img src="CodeSnippetThreeGlobals.jpg" width="100%" height="16%">
			
			<hr>
			
			<p>
			Next we started checking that the file was okay to submit. We compared the submitted password to correct password, used the 'empty()' function to check a file was really uploaded, made 
			sure the file wasn't too large with the 'size' property. We also checked it was a .zip file by looking at its file extension. Finally, if all of these were true, we decided the server 
			should email the file and other information to the Webmaster. 
			</p>
			
			<p>
			One of the fun things about PHP is that it can print HTML tags. We were able to color error messages red by printing them inside span tags. We gave the spans the id 'error' and then 
			set the color of '#error' to red in the CSS document. Since PHP prints the tags, the text inside is colored.
			</p> 
			
			<hr>
			
			<img src="CodeSnippetFourErrorChecking.jpg" width="100%" height="35">
			
			<hr>
			
			<p>
			We created a submitVersion function to separate the error checking and emailing code. By borrowing some code from the PHPMailer libraries, we can easily send attachments with PHP.
			</p>		
			
			<p>
			We built an new PHPMailer object to hold information about our email until we are ready to send it. We set the object to securely connect to the GMail account 'bxvwebmaster@gmail.com' 
			using a strong password.
			</p>
			
			<p>
			Then we filled in some standard information about the email, such From: and Subject:. We directed the email to send itself from 'bxvwebmaster@gmail.com' back to 
			'bxvwebmaster@gmail.com' so that the Webmaster would recieve it. 
			</p>			
			
			<p>
			After checking the that the comment isn't empty, we set the comment plus "By: " plus the authors to be the body of the email. As you might notice, a '.' combines two strings togeather 	
			in PHP. Finally, we attach the file and send the email.
			</p>
			
			<hr>		
			
			<img src="CodeSnippetFiveEmail.jpg">

			<hr>
			
			<p>
			If there is a error we print an error message, otherwise we display a green success. 
			</p>
			
			<br>
			<span><hr><span>
			<br>
			
			<p>
			This project was a ton of fun to write. Feel free to download the code or check it out on this site.
			</p>
			
			<a href="../../files/VersionManager.zip">Download</a> <br> <br>
			<a href="SiteUpdater.html">Try it</a>
			
			<br>
			<br>
			<br>
			<br>
			<br>			
			<br>
			<br>
			<br>			
			<br>
			<br>
			<br>
			<br>
			
		</div>
		
		<footer>
		
		</footer>

	</body>

</html>
